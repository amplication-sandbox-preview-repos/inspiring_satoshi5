/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SdfasdfService } from "../sdfasdf.service";
import { SdfasdfCreateInput } from "./SdfasdfCreateInput";
import { Sdfasdf } from "./Sdfasdf";
import { SdfasdfFindManyArgs } from "./SdfasdfFindManyArgs";
import { SdfasdfWhereUniqueInput } from "./SdfasdfWhereUniqueInput";
import { SdfasdfUpdateInput } from "./SdfasdfUpdateInput";

export class SdfasdfControllerBase {
  constructor(protected readonly service: SdfasdfService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Sdfasdf })
  async createSdfasdf(
    @common.Body() data: SdfasdfCreateInput
  ): Promise<Sdfasdf> {
    return await this.service.createSdfasdf({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Sdfasdf] })
  @ApiNestedQuery(SdfasdfFindManyArgs)
  async sdfasdfs(@common.Req() request: Request): Promise<Sdfasdf[]> {
    const args = plainToClass(SdfasdfFindManyArgs, request.query);
    return this.service.sdfasdfs({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Sdfasdf })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sdfasdf(
    @common.Param() params: SdfasdfWhereUniqueInput
  ): Promise<Sdfasdf | null> {
    const result = await this.service.sdfasdf({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Sdfasdf })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSdfasdf(
    @common.Param() params: SdfasdfWhereUniqueInput,
    @common.Body() data: SdfasdfUpdateInput
  ): Promise<Sdfasdf | null> {
    try {
      return await this.service.updateSdfasdf({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Sdfasdf })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSdfasdf(
    @common.Param() params: SdfasdfWhereUniqueInput
  ): Promise<Sdfasdf | null> {
    try {
      return await this.service.deleteSdfasdf({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
