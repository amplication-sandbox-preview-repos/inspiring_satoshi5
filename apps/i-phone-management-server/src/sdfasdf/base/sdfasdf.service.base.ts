/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Sdfasdf as PrismaSdfasdf } from "@prisma/client";

export class SdfasdfServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SdfasdfCountArgs, "select">): Promise<number> {
    return this.prisma.sdfasdf.count(args);
  }

  async sdfasdfs(args: Prisma.SdfasdfFindManyArgs): Promise<PrismaSdfasdf[]> {
    return this.prisma.sdfasdf.findMany(args);
  }
  async sdfasdf(
    args: Prisma.SdfasdfFindUniqueArgs
  ): Promise<PrismaSdfasdf | null> {
    return this.prisma.sdfasdf.findUnique(args);
  }
  async createSdfasdf(args: Prisma.SdfasdfCreateArgs): Promise<PrismaSdfasdf> {
    return this.prisma.sdfasdf.create(args);
  }
  async updateSdfasdf(args: Prisma.SdfasdfUpdateArgs): Promise<PrismaSdfasdf> {
    return this.prisma.sdfasdf.update(args);
  }
  async deleteSdfasdf(args: Prisma.SdfasdfDeleteArgs): Promise<PrismaSdfasdf> {
    return this.prisma.sdfasdf.delete(args);
  }
}
